version: '2.4'

services:
  app: &app
    build:
      context: .
      dockerfile: ./.dockerdev/Dockerfile
      args:
        RUBY_VERSION: '3.1.2'
        PG_MAJOR: '14'
        NODE_MAJOR: '18'
        BUNDLER_VERSION: '2.3.15'
    image: wedding:0.0.1
    tmpfs:
      - /tmp
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: '3'
  backend: &backend
    <<: *app
    stdin_open: true
    tty: true
    volumes:
      - .:/app:cached
      - rails_cache:/app/tmp/cache
      - bundle:/usr/local/bundle
      - assets:/app/public/assets
      - .dockerdev/.psqlrc:/root/.psqlrc:ro
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - RAILS_ENV=${RAILS_ENV:-development}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/}
      - DATABASE_URL=${DATABASE_URL:-postgres://default:default@postgres:5432}
      - APP_URL=${APP_URL:-http://localhost}
      - BOOTSNAP_CACHE_DIR=/bundle/bootsnap
      - WEBPACKER_DEV_SERVER_HOST=webpacker
      - WEB_CONCURRENCY=${WEB_CONCURRENCY:-1}
      - HISTFILE=/app/log/.bash_history
      - PSQL_HISTFILE=/app/log/.psql_history
      - EDITOR=vi
      - AWS_CLOUD_FRONT_URL=${AWS_CLOUD_FRONT_URL}
      - BUCKETEER_AWS_ACCESS_KEY_ID=${BUCKETEER_AWS_ACCESS_KEY_ID}
      - BUCKETEER_AWS_SECRET_ACCESS_KEY=${BUCKETEER_AWS_SECRET_ACCESS_KEY}
      - BUCKETEER_AWS_REGION=${BUCKETEER_AWS_REGION}
      - BUCKETEER_BUCKET_NAME=${BUCKETEER_BUCKET_NAME}
      - WORKER_TIMEOUT=${WORKER_TIMEOUT:-60}
      - RACK_TIMEOUT_SERVICE_TIMEOUT=${RACK_TIMEOUT_SERVICE_TIMEOUT:-15}
      - DEBUG_MODE=${DEBUG_MODE}
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - DB_POOL=${DB_POOL}
      - DISABLE_SPRING=1
  runner:
    <<: *backend
    command: /bin/bash
    ports:
      - '4000:4000'
      - '3002:3002'
  rails:
    <<: *backend
    command: bash -c "rm -rf tmp/pids/server.pid && yarn install && yarn build && bundle exec rails s -b 0.0.0.0 -p 4000"
    ports:
      - '4000:4000'

  sidekiq:
    <<: *backend
    command: bundle exec sidekiq -C config/sidekiq.yml

  postgres:
    build:
      context: .
      dockerfile: ./.dockerdev/postgres/Dockerfile
    volumes:
      - .psqlrc:/root/.psqlrc:ro
      - postgres:/var/lib/postgresql/data
      - ./log:/root/log:cached
    environment:
      - PSQL_HISTFILE=/root/log/.psql_history
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-default}
      - POSTGRES_USER=${POSTGRES_USER:-default}
    ports:
      - "5432:5432"
#    restart: always
    healthcheck:
      test: pg_isready -U postgres -h 127.0.0.1
      interval: 5s

  redis:
    image: redis:6.2-alpine
    volumes:
      - redis:/data
    ports:
      - 6379
    healthcheck:
      test: redis-cli ping
      interval: 1s
      timeout: 3s
      retries: 30

#  webpacker:
#    <<: *app
#    command: ./bin/webpack-dev-server
#    ports:
#      - '3035:3035'
#    volumes:
#      - .:/app:cached
#      - bundle:/usr/local/bundle
#      - node_modules:/app/node_modules
#      - packs:/app/public/packs
#    environment:
#      - NODE_ENV=${NODE_ENV:-development}
#      - RAILS_ENV=${RAILS_ENV:-development}
#      - WEBPACKER_DEV_SERVER_HOST=0.0.0.0

volumes:
  postgres:
  redis:
  bundle:
  rails_cache:
  assets:
